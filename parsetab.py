
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALSrightNAMErightNUMPYPOINTleftPLUSMINUSleftTIMESDIVIDErightUMINUSAND ARANGE ARGMAX ARGMIN ARRAY COMA DIFERENTE DIGUAL DIVIDE DIVIDE_INT DOSPUNTOS ELSE EQUALS IF LCORCHETE LINE LIST LPAREN MAYORQUE MEAN MENORQUE MINUS NAME NUMBER NUMPY OR PLUS POINT POTENCY PRINT RCORCHETE RESHAPE RPAREN STR SUM SUM TAB TIMES WHEREstatement : expression\n                 | expresasign\n                 | expression_numpy statement : TAB PRINT LPAREN STR COMA expression RPAREN\n            | PRINT LPAREN STR COMA expression RPAREN\n            | PRINT LPAREN expression RPAREN\n            | TAB PRINT LPAREN expression RPAREN   statement : PRINT\n             | PRINT expression\n             | PRINT LPAREN expression\n             | PRINT LPAREN\n             | PRINT TAB expressionexpresasign : NAME EQUALS expression\n                   | NAME EQUALS expression_numpy expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression POTENCY expression\n                  | expression DIVIDE_INT expression condition : expression DIGUAL expression\n    | expression DIFERENTE expression\n    | expression MAYORQUE expression\n    | expression MENORQUE expression\n    | condition TAB AND TAB condition\n    | condition TAB OR TAB condition  statement : IF LPAREN condition RPAREN DOSPUNTOS\n     statement : IF LPAREN condition RPAREN\n    | IF TAB condition DOSPUNTOS\n    | IF LPAREN condition\n    | IF LPAREN \n    | IF LPAREN expression\n    | IF LPAREN condition DOSPUNTOS  where : LPAREN condition_where COMA NAME COMA expression RPAREN  condition_where : NAME MENORQUE NUMBER\n                        | NAME MAYORQUE NUMBER\n                        | NAME DIGUAL NUMBER  statement : ELSE DOSPUNTOS  \n    statement : ELSE\n    \n    expression_numpy : NUMPY POINT numpyfuncnumpyfunc : ARRAY array\n                 | ARANGE arange\n                 | ARANGE arange_error\n                 | ARRAY array_error\n                 | ARGMAX argmax\n                 | ARGMAX argmax_error\n                 | ARGMIN argmin\n                 | ARGMIN argmin_error\n                 | SUM sum\n                 | SUM sum_error\n                 | WHERE where  array : LPAREN NAME RPAREN\n                 | LPAREN NUMBER RPAREN\n                 | LPAREN expression RPAREN\n    \n    array_error : LPAREN STR RPAREN\n     arange : LPAREN NUMBER RPAREN\n                | LPAREN NAME RPAREN  arange_error : LPAREN STR RPAREN argmin : LPAREN NAME RPAREN\n                | LPAREN expression RPAREN  argmax : LPAREN NAME RPAREN\n                | LPAREN expression RPAREN \n    argmin_error : LPAREN STR RPAREN\n    \n    argmax_error : LPAREN STR RPAREN\n     sum : LPAREN NAME RPAREN\n                | LPAREN expression RPAREN \n    sum_error : LPAREN STR RPAREN\n    expression : MINUS expression %prec UMINUSexpression : NUMBERexpression : STR expression : LCORCHETE expression_list RCORCHETE \n                    | LCORCHETE RCORCHETE\n                    | list_error  list_error : LCORCHETE expression_list\n                   | LCORCHETE expression_list COMA  expression_list :  expression COMA expression_list\n                        | expression expression : LPAREN expression RPARENexpression : NAME'
    
_lr_action_items = {'TAB':([0,6,8,9,12,14,27,32,33,34,35,38,39,40,41,42,43,48,49,51,53,54,77,99,100,101,102,103,104,148,149,],[5,26,-70,30,-69,-73,-79,-68,-74,-72,-77,-15,-16,-17,-18,-19,-20,-78,71,71,-71,-75,-76,125,126,-21,-22,-23,-24,71,71,]),'PRINT':([0,5,],[6,23,]),'IF':([0,],[9,]),'ELSE':([0,],[10,]),'MINUS':([0,2,6,7,8,11,12,13,14,15,17,18,19,20,21,22,24,25,26,27,28,29,30,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,50,52,53,54,55,56,65,66,67,68,72,73,74,75,77,80,86,89,92,95,97,101,102,103,104,105,106,107,108,112,113,114,115,116,117,118,119,120,123,125,126,154,155,],[11,18,11,11,-70,11,-69,11,-73,-79,11,11,11,11,11,11,11,18,11,-79,18,11,11,-68,-74,-72,18,11,-15,-16,-17,-18,18,18,11,-70,18,18,-78,18,18,-71,-75,11,18,-70,18,11,-78,11,11,11,11,-76,11,11,11,11,11,18,18,18,18,18,-79,-69,18,-70,-79,18,-70,-79,18,-70,-79,18,-70,18,11,11,11,18,]),'NUMBER':([0,6,7,11,13,17,18,19,20,21,22,24,26,29,30,36,44,55,67,72,73,74,75,80,83,86,89,92,95,125,126,144,145,146,154,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,106,109,12,12,12,12,12,12,151,152,153,12,]),'STR':([0,6,7,11,13,17,18,19,20,21,22,24,26,29,30,36,44,55,67,72,73,74,75,80,83,86,89,92,95,125,126,154,],[8,8,8,8,8,8,8,8,8,8,8,45,8,8,8,8,65,8,8,8,8,8,8,108,111,114,117,120,8,8,8,8,]),'LCORCHETE':([0,6,7,11,13,17,18,19,20,21,22,24,26,29,30,36,44,55,67,72,73,74,75,80,86,89,92,95,125,126,154,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'LPAREN':([0,6,7,9,11,13,17,18,19,20,21,22,23,24,26,29,30,36,44,55,59,60,61,62,63,64,67,72,73,74,75,80,86,89,92,95,125,126,154,],[7,24,7,29,7,7,7,7,7,7,7,7,44,7,7,7,7,7,7,7,80,83,86,89,92,94,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'NAME':([0,6,7,11,13,17,18,19,20,21,22,24,26,29,30,36,44,55,67,72,73,74,75,80,83,86,89,92,94,95,125,126,143,154,],[15,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,105,110,112,115,118,122,27,27,27,150,27,]),'NUMPY':([0,36,],[16,16,]),'$end':([1,2,3,4,6,8,10,12,14,15,24,25,27,29,31,32,33,34,35,38,39,40,41,42,43,45,46,47,48,49,50,53,54,56,57,58,68,69,70,76,77,78,79,81,82,84,85,87,88,90,91,93,96,98,101,102,103,104,124,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,149,156,],[0,-1,-2,-3,-8,-70,-39,-69,-73,-79,-11,-9,-79,-31,-38,-68,-74,-72,-77,-15,-16,-17,-18,-19,-20,-70,-10,-12,-78,-30,-32,-71,-75,-13,-14,-40,-6,-28,-33,-29,-76,-41,-44,-42,-43,-45,-46,-47,-48,-49,-50,-51,-7,-27,-21,-22,-23,-24,-5,-52,-53,-54,-55,-56,-57,-58,-61,-62,-64,-59,-60,-63,-65,-66,-67,-4,-25,-26,-34,]),'PLUS':([2,8,12,14,15,25,27,28,32,33,34,35,38,39,40,41,42,43,45,46,47,48,50,52,53,54,56,65,66,68,77,97,101,102,103,104,105,106,107,108,112,113,114,115,116,117,118,119,120,123,155,],[17,-70,-69,-73,-79,17,-79,17,-68,-74,-72,17,-15,-16,-17,-18,17,17,-70,17,17,-78,17,17,-71,-75,17,-70,17,-78,-76,17,17,17,17,17,-79,-69,17,-70,-79,17,-70,-79,17,-70,-79,17,-70,17,17,]),'TIMES':([2,8,12,14,15,25,27,28,32,33,34,35,38,39,40,41,42,43,45,46,47,48,50,52,53,54,56,65,66,68,77,97,101,102,103,104,105,106,107,108,112,113,114,115,116,117,118,119,120,123,155,],[19,-70,-69,-73,-79,19,-79,19,-68,-74,-72,19,19,19,-17,-18,19,19,-70,19,19,-78,19,19,-71,-75,19,-70,19,-78,-76,19,19,19,19,19,-79,-69,19,-70,-79,19,-70,-79,19,-70,-79,19,-70,19,19,]),'DIVIDE':([2,8,12,14,15,25,27,28,32,33,34,35,38,39,40,41,42,43,45,46,47,48,50,52,53,54,56,65,66,68,77,97,101,102,103,104,105,106,107,108,112,113,114,115,116,117,118,119,120,123,155,],[20,-70,-69,-73,-79,20,-79,20,-68,-74,-72,20,20,20,-17,-18,20,20,-70,20,20,-78,20,20,-71,-75,20,-70,20,-78,-76,20,20,20,20,20,-79,-69,20,-70,-79,20,-70,-79,20,-70,-79,20,-70,20,20,]),'POTENCY':([2,8,12,14,15,25,27,28,32,33,34,35,38,39,40,41,42,43,45,46,47,48,50,52,53,54,56,65,66,68,77,97,101,102,103,104,105,106,107,108,112,113,114,115,116,117,118,119,120,123,155,],[21,-70,-69,-73,-79,21,-79,21,-68,-74,-72,21,-15,-16,-17,-18,21,21,-70,21,21,-78,21,21,-71,-75,21,-70,21,-78,-76,21,21,21,21,21,-79,-69,21,-70,-79,21,-70,-79,21,-70,-79,21,-70,21,21,]),'DIVIDE_INT':([2,8,12,14,15,25,27,28,32,33,34,35,38,39,40,41,42,43,45,46,47,48,50,52,53,54,56,65,66,68,77,97,101,102,103,104,105,106,107,108,112,113,114,115,116,117,118,119,120,123,155,],[22,-70,-69,-73,-79,22,-79,22,-68,-74,-72,22,-15,-16,-17,-18,22,22,-70,22,22,-78,22,22,-71,-75,22,-70,22,-78,-76,22,22,22,22,22,-79,-69,22,-70,-79,22,-70,-79,22,-70,-79,22,-70,22,22,]),'RPAREN':([8,12,14,27,28,32,33,34,35,38,39,40,41,42,43,45,46,48,49,53,54,65,66,77,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,148,149,155,],[-70,-69,-73,-79,48,-68,-74,-72,-77,-15,-16,-17,-18,-19,-20,-70,68,-78,69,-71,-75,-70,96,-76,124,-21,-22,-23,-24,-79,128,129,130,131,132,133,-79,135,136,-79,138,139,-79,141,142,147,-25,-26,156,]),'COMA':([8,12,14,27,32,33,34,35,38,39,40,41,42,43,45,48,53,54,65,77,121,150,151,152,153,],[-70,-69,-73,-79,-68,54,-72,55,-15,-16,-17,-18,-19,-20,67,-78,-71,-75,95,-76,143,154,-35,-36,-37,]),'RCORCHETE':([8,12,13,14,27,32,33,34,35,38,39,40,41,42,43,48,53,54,77,],[-70,-69,34,-73,-79,-68,53,-72,-77,-15,-16,-17,-18,-19,-20,-78,-71,-75,-76,]),'DIGUAL':([8,12,14,27,32,33,34,35,38,39,40,41,42,43,48,50,52,53,54,77,122,],[-70,-69,-73,-79,-68,-74,-72,-77,-15,-16,-17,-18,-19,-20,-78,72,72,-71,-75,-76,146,]),'DIFERENTE':([8,12,14,27,32,33,34,35,38,39,40,41,42,43,48,50,52,53,54,77,],[-70,-69,-73,-79,-68,-74,-72,-77,-15,-16,-17,-18,-19,-20,-78,73,73,-71,-75,-76,]),'MAYORQUE':([8,12,14,27,32,33,34,35,38,39,40,41,42,43,48,50,52,53,54,77,122,],[-70,-69,-73,-79,-68,-74,-72,-77,-15,-16,-17,-18,-19,-20,-78,74,74,-71,-75,-76,145,]),'MENORQUE':([8,12,14,27,32,33,34,35,38,39,40,41,42,43,48,50,52,53,54,77,122,],[-70,-69,-73,-79,-68,-74,-72,-77,-15,-16,-17,-18,-19,-20,-78,75,75,-71,-75,-76,144,]),'DOSPUNTOS':([8,10,12,14,27,32,33,34,35,38,39,40,41,42,43,48,49,51,53,54,69,77,101,102,103,104,148,149,],[-70,31,-69,-73,-79,-68,-74,-72,-77,-15,-16,-17,-18,-19,-20,-78,70,76,-71,-75,98,-76,-21,-22,-23,-24,-25,-26,]),'EQUALS':([15,],[36,]),'POINT':([16,],[37,]),'ARRAY':([37,],[59,]),'ARANGE':([37,],[60,]),'ARGMAX':([37,],[61,]),'ARGMIN':([37,],[62,]),'SUM':([37,],[63,]),'WHERE':([37,],[64,]),'AND':([71,],[99,]),'OR':([71,],[100,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,6,7,11,13,17,18,19,20,21,22,24,26,29,30,36,44,55,67,72,73,74,75,80,86,89,92,95,125,126,154,],[2,25,28,32,35,38,39,40,41,42,43,46,47,50,52,56,66,35,97,101,102,103,104,107,113,116,119,123,52,52,155,]),'expresasign':([0,],[3,]),'expression_numpy':([0,36,],[4,57,]),'list_error':([0,6,7,11,13,17,18,19,20,21,22,24,26,29,30,36,44,55,67,72,73,74,75,80,86,89,92,95,125,126,154,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'expression_list':([13,55,],[33,77,]),'condition':([29,30,125,126,],[49,51,148,149,]),'numpyfunc':([37,],[58,]),'array':([59,],[78,]),'array_error':([59,],[79,]),'arange':([60,],[81,]),'arange_error':([60,],[82,]),'argmax':([61,],[84,]),'argmax_error':([61,],[85,]),'argmin':([62,],[87,]),'argmin_error':([62,],[88,]),'sum':([63,],[90,]),'sum_error':([63,],[91,]),'where':([64,],[93,]),'condition_where':([94,],[121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','lex.py',153),
  ('statement -> expresasign','statement',1,'p_statement_expr','lex.py',154),
  ('statement -> expression_numpy','statement',1,'p_statement_expr','lex.py',155),
  ('statement -> TAB PRINT LPAREN STR COMA expression RPAREN','statement',7,'p_print','lex.py',163),
  ('statement -> PRINT LPAREN STR COMA expression RPAREN','statement',6,'p_print','lex.py',164),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_print','lex.py',165),
  ('statement -> TAB PRINT LPAREN expression RPAREN','statement',5,'p_print','lex.py',166),
  ('statement -> PRINT','statement',1,'p_print_error','lex.py',170),
  ('statement -> PRINT expression','statement',2,'p_print_error','lex.py',171),
  ('statement -> PRINT LPAREN expression','statement',3,'p_print_error','lex.py',172),
  ('statement -> PRINT LPAREN','statement',2,'p_print_error','lex.py',173),
  ('statement -> PRINT TAB expression','statement',3,'p_print_error','lex.py',174),
  ('expresasign -> NAME EQUALS expression','expresasign',3,'p_statement_assign','lex.py',180),
  ('expresasign -> NAME EQUALS expression_numpy','expresasign',3,'p_statement_assign','lex.py',181),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','lex.py',185),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','lex.py',186),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','lex.py',187),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','lex.py',188),
  ('expression -> expression POTENCY expression','expression',3,'p_expression_binop','lex.py',189),
  ('expression -> expression DIVIDE_INT expression','expression',3,'p_expression_binop','lex.py',190),
  ('condition -> expression DIGUAL expression','condition',3,'p_condition','lex.py',205),
  ('condition -> expression DIFERENTE expression','condition',3,'p_condition','lex.py',206),
  ('condition -> expression MAYORQUE expression','condition',3,'p_condition','lex.py',207),
  ('condition -> expression MENORQUE expression','condition',3,'p_condition','lex.py',208),
  ('condition -> condition TAB AND TAB condition','condition',5,'p_condition','lex.py',209),
  ('condition -> condition TAB OR TAB condition','condition',5,'p_condition','lex.py',210),
  ('statement -> IF LPAREN condition RPAREN DOSPUNTOS','statement',5,'p_if','lex.py',213),
  ('statement -> IF LPAREN condition RPAREN','statement',4,'p_if_error','lex.py',217),
  ('statement -> IF TAB condition DOSPUNTOS','statement',4,'p_if_error','lex.py',218),
  ('statement -> IF LPAREN condition','statement',3,'p_if_error','lex.py',219),
  ('statement -> IF LPAREN','statement',2,'p_if_error','lex.py',220),
  ('statement -> IF LPAREN expression','statement',3,'p_if_error','lex.py',221),
  ('statement -> IF LPAREN condition DOSPUNTOS','statement',4,'p_if_error','lex.py',222),
  ('where -> LPAREN condition_where COMA NAME COMA expression RPAREN','where',7,'p_where','lex.py',227),
  ('condition_where -> NAME MENORQUE NUMBER','condition_where',3,'p_condition_where','lex.py',240),
  ('condition_where -> NAME MAYORQUE NUMBER','condition_where',3,'p_condition_where','lex.py',241),
  ('condition_where -> NAME DIGUAL NUMBER','condition_where',3,'p_condition_where','lex.py',242),
  ('statement -> ELSE DOSPUNTOS','statement',2,'p_else','lex.py',250),
  ('statement -> ELSE','statement',1,'p_else_error','lex.py',254),
  ('expression_numpy -> NUMPY POINT numpyfunc','expression_numpy',3,'p_expresion_numpy','lex.py',261),
  ('numpyfunc -> ARRAY array','numpyfunc',2,'p_numpyfuncion','lex.py',266),
  ('numpyfunc -> ARANGE arange','numpyfunc',2,'p_numpyfuncion','lex.py',267),
  ('numpyfunc -> ARANGE arange_error','numpyfunc',2,'p_numpyfuncion','lex.py',268),
  ('numpyfunc -> ARRAY array_error','numpyfunc',2,'p_numpyfuncion','lex.py',269),
  ('numpyfunc -> ARGMAX argmax','numpyfunc',2,'p_numpyfuncion','lex.py',270),
  ('numpyfunc -> ARGMAX argmax_error','numpyfunc',2,'p_numpyfuncion','lex.py',271),
  ('numpyfunc -> ARGMIN argmin','numpyfunc',2,'p_numpyfuncion','lex.py',272),
  ('numpyfunc -> ARGMIN argmin_error','numpyfunc',2,'p_numpyfuncion','lex.py',273),
  ('numpyfunc -> SUM sum','numpyfunc',2,'p_numpyfuncion','lex.py',274),
  ('numpyfunc -> SUM sum_error','numpyfunc',2,'p_numpyfuncion','lex.py',275),
  ('numpyfunc -> WHERE where','numpyfunc',2,'p_numpyfuncion','lex.py',276),
  ('array -> LPAREN NAME RPAREN','array',3,'p_array','lex.py',281),
  ('array -> LPAREN NUMBER RPAREN','array',3,'p_array','lex.py',282),
  ('array -> LPAREN expression RPAREN','array',3,'p_array','lex.py',283),
  ('array_error -> LPAREN STR RPAREN','array_error',3,'p_array_error','lex.py',298),
  ('arange -> LPAREN NUMBER RPAREN','arange',3,'p_arange','lex.py',303),
  ('arange -> LPAREN NAME RPAREN','arange',3,'p_arange','lex.py',304),
  ('arange_error -> LPAREN STR RPAREN','arange_error',3,'p_arange_error','lex.py',318),
  ('argmin -> LPAREN NAME RPAREN','argmin',3,'p_argmin','lex.py',322),
  ('argmin -> LPAREN expression RPAREN','argmin',3,'p_argmin','lex.py',323),
  ('argmax -> LPAREN NAME RPAREN','argmax',3,'p_argmax','lex.py',334),
  ('argmax -> LPAREN expression RPAREN','argmax',3,'p_argmax','lex.py',335),
  ('argmin_error -> LPAREN STR RPAREN','argmin_error',3,'p_argmin_error','lex.py',347),
  ('argmax_error -> LPAREN STR RPAREN','argmax_error',3,'p_argmax_error','lex.py',353),
  ('sum -> LPAREN NAME RPAREN','sum',3,'p_sum','lex.py',358),
  ('sum -> LPAREN expression RPAREN','sum',3,'p_sum','lex.py',359),
  ('sum_error -> LPAREN STR RPAREN','sum_error',3,'p_sum_error','lex.py',371),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','lex.py',376),
  ('expression -> NUMBER','expression',1,'p_expression_number','lex.py',381),
  ('expression -> STR','expression',1,'p_expresion_str','lex.py',385),
  ('expression -> LCORCHETE expression_list RCORCHETE','expression',3,'p_expression_lst','lex.py',389),
  ('expression -> LCORCHETE RCORCHETE','expression',2,'p_expression_lst','lex.py',390),
  ('expression -> list_error','expression',1,'p_expression_lst','lex.py',391),
  ('list_error -> LCORCHETE expression_list','list_error',2,'p_expression_lst_error','lex.py',398),
  ('list_error -> LCORCHETE expression_list COMA','list_error',3,'p_expression_lst_error','lex.py',399),
  ('expression_list -> expression COMA expression_list','expression_list',3,'p_expresion_list','lex.py',404),
  ('expression_list -> expression','expression_list',1,'p_expresion_list','lex.py',405),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','lex.py',414),
  ('expression -> NAME','expression',1,'p_expression_name','lex.py',418),
]
